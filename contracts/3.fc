{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

() recv_internal() {
}
;; int get_size(int flag){
;;   int flag_size = 0;
;;   while(~(flag == 0)){
;;     flag = flag >> 1;
;;     flag_size += 1;
;;   }
;;   return flag_size; 
;; }
int get_size(int flag) asm "UBITSIZE";
(int, int) altered_match(int match,int match_size){
  int mask = 1 << (match_size);
  int match_copy = match;
  mask &= match;
  match = match ^ mask;
  return ((match_copy >> (match_size)), match);
}
(slice, int) load_bitttt(slice s) {
  if(s.slice_data_empty?()){
    if(s.slice_refs_empty?()){
      return (s, -1);
    }
    s = s~load_ref().begin_parse();
  }
  int bitttt = 0;
  bitttt = (s~load_uint(1));
  return (s, bitttt);
}
cell search_and_replace(slice s, int flag, int value, int match, int match_size){
  int flag_size = get_size(flag);
  builder ans = begin_cell();
  ;; int match_size = 0;
  int bitttt = s~load_bitttt();
  if(match_size > 0){
    ans~store_uint(match, match_size);
    match = 0;
    match_size = 0;
  }
  while(bitttt != -1){
    match = (match << 1) | bitttt;
    match_size += 1;
    if(match_size > flag_size){
      int first_bit = 0;
      (first_bit, match) = altered_match(match, flag_size);
      match_size -= 1;
      ans~store_uint(first_bit, 1);
    }
    if((match == flag)){
      if((1023 - ans.builder_bits()) < get_size(value)){
        cell hello = search_and_replace(s~load_ref().begin_parse(), flag, value, match, match_size);
        ans = store_ref(ans, hello);
        return ans.end_cell();
      }
      ans~store_uint(value, get_size(value));
      match = 0;
      match_size = 0; 
    }
    if(ans.builder_bits() >= 1023){
      cell hello = search_and_replace(s, flag, value, match, match_size);
      ifnot(hello.begin_parse().slice_data_empty?()){
        ans = store_ref(ans, hello);
      }
      return ans.end_cell();
    }
  }
  if(match_size > 0){
    if ((1023 - ans.builder_bits()) >= get_size(value)){
      ans~store_uint(match, match_size);
      match = 0;
      match_size = 0;
      return ans.end_cell();
    }
    cell hello = search_and_replace(s, flag, value, match, match_size);
    ans = store_ref(ans, hello);
    return ans.end_cell();
  }
  return ans.end_cell();
}
;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  slice s = linked_list.begin_parse();
  return search_and_replace(s, flag, value, 0, 0);
}

