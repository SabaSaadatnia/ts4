{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
() recv_internal() {
}
cell recursiv(slice s, int shift, int flag){
    builder hi = begin_cell();
    int chara = 0;
    if (flag == 1){
        flag = 0;   
        hi~store_int(0, 32);
    }
    while(~ s.slice_data_empty?()){
        chara = 0;
        chara = s~load_uint(8);
        int jam = chara + shift;
        if((chara >= 65) & (chara <= 90)){
            if(jam <= 90){
                chara = chara + shift;
            }
            if(jam > 90){
                chara = chara + shift - 26;
            }
        }
        if((chara >= 97) & (chara <= 122)){
            if(jam <= 122){
                chara = chara + shift;
            }
            if(jam > 122){
                chara = chara + shift - 26;
            }
        }
        hi = store_uint(hi, chara, 8);
    }
    if(~ s.slice_refs_empty?()){
        cell hello = recursiv(s~load_ref().begin_parse(), shift, 0);
        hi = store_ref(hi, hello);
    }
    return hi.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    shift = shift % 26;
    ;; int random = s~load_uint(32);
    s~skip_bits(32);
  return recursiv(s, shift, 1);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    shift = shift % 26;
    s~skip_bits(32);
    ;; int random = s~load_uint(32);
    shift = 26 - shift; 
  return recursiv(s, shift, 1);
}
